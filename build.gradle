import com.android.build.gradle.internal.tasks.databinding.DataBindingExportBuildInfoTask

/*
 * Copyright 2015 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.0'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = "2.10"
}

allprojects {
    repositories {
        jcenter()
    }
}

// Improve Build Server performance.
// See Tip 3: http://tools.android.com/tech-docs/new-build-system/tips
project.ext.preDexLibs = !project.hasProperty('disablePreDex')

subprojects {
    // Disable pre-dexing only on your build server.
    project.plugins.whenPluginAdded { plugin ->
        if ("com.android.build.gradle.AppPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        } else if ("com.android.build.gradle.LibraryPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        }
    }

    /*
     * Workaround for https://code.google.com/p/android/issues/detail?id=182715
     *
     * The Android Gradle plugin is creating DataBindingExportBuildInfoTasks for the instrumentation
     * APK that generates from the app APKs layouts. This creates duplicate classes in the app and
     * instrumentation APK which leads to
     *      java.lang.IllegalAccessError: Class ref in pre-verified class resolved to unexpected implementation
     * on older devices.
     *
     * The workaround is to get the DataBindingExportBuildInfoTasks tasks for the instrumentation APK
     * and delete the files right after it creates them.
     */
    tasks.withType(DataBindingExportBuildInfoTask) { task ->
        if (task.name.endsWith("AndroidTest")) {
            task.finalizedBy(tasks.create("${task.name}Workaround") << {
                task.output.deleteDir()
            })
        }
    }
}
